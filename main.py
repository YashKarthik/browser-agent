from typing import Union
from playwright.sync_api import sync_playwright, Locator, ElementHandle
import openai
from time import sleep

"""
Next steps:
    - [X] Create a structure that maps integer ids (generated by us) to Locator objects.
    - [ ] Do something similar for simplified version of the elements (<input/> in left)
    - We send the simplified view, list of these elements to GPT.
    - GPT responds with ACTION and ID.
    - Where ACTION corresponds to actions we've implemented.
    - We perform the action on an element by grabbing it from our struct.
    - Since the struct contains `Locator`s, we can do the action on it directly using Playwright.

Later:
    - Internal monologue.
"""

class Crawler:
    def __init__(self):
        p = sync_playwright().start()
        self.browser = p.chromium.launch(headless=False)
        self.page = self.browser.new_page()
        self.elements_buffer: dict[int, Union[Locator, ElementHandle]] = {}
        self.simplified_elements_buffer: dict[int, str] = {}

    def go_to_page(self, url: str):
        self.page.goto(url)

    def add_elements_to_buffer(self):
        page_html = self.page.query_selector("html")
        links = page_html.query_selector_all("a")
        buttons = page_html.query_selector_all("button")
        images = page_html.query_selector_all("img")

        i = 0
        for link in links:
            text = link.inner_text().strip().replace("\n", "").replace("  ", " ")
            if text == "":
                continue

            self.elements_buffer[i] = link
            self.simplified_elements_buffer[i] = "<link id={0}>{1}</link>".format(i, text)
            i += 1

        for button in buttons:
            text = button.inner_text().strip().replace("\n", "").replace("  ", " ")
            if text == "":
                continue

            self.elements_buffer[i] = button
            self.simplified_elements_buffer[i] = "<button id={0}>{1}</button>".format(i, text)
            i += 1

        for image in images:
            text = image.get_attribute("alt")
            if text == "":
                continue

            self.elements_buffer[i] = image
            self.simplified_elements_buffer[i] = "<img id={0} alt=\"{1}\" />".format(i, text)
            i += 1

if __name__ == "__main__":
    crawler = Crawler()
    crawler.go_to_page("https://www.reddit.com")
    crawler.add_elements_to_buffer()

    for i in crawler.simplified_elements_buffer.values():
        print(i)

    sleep(5)
    crawler.browser.close()
